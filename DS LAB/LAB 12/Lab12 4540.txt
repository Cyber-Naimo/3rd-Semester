***************************		QUESTION NO 1:		*****************************************

#include<iostream>
#include<bits\stdc++.h>
using namespace std;
class Graph
{
	public:
		unordered_map<int,set<int>> ad;
		
		// function for creating adjancy list
		void AddEdges(int row,int col,bool directed)
		{
			// 1 mean directed
			// 0 means undirected
			ad[row].insert(col);
			
			// for directed 
			if(directed == false)
			{
				ad[col].insert(row);
			}
		}
		
		// dunction to print Adjency List
		void DisplayAdjencyList()
		{
			for(auto i:ad)
			{
				cout<<" "<<i.first<<" --> ";
				for(auto j:i.second)
				{
					cout<<" "<<j<<" , ";
				}
				cout<<endl;
			}
			
		}
		
};
int main()
{
	int n;
	cout<<"ENTER NO OF NODES: "<<endl;
	cin>>n;
	int m;
	cout<<"Enter No of Edges: "<<endl;
	cin>>m;
	Graph g;
	cout<<"Enter Edges Connection : "<<endl;
	for(int i=0;i<m;i++)
	{
		int row,col;
		cin>>row>>col;
		// now creating an edges
		g.AddEdges(row,col,0);
	}
	cout<<"Adjancy List: "<<endl;
	g.DisplayAdjencyList();
	/*
	1 0
	1 2
	2 3
	3 1
	3 4
	0 4
	*/
}


////////////////////////////////////////////////////////////////////////////////////////////////////////


***************************		QUESTION NO 2:		*****************************************


#include <iostream>
#include <cstdlib>
using namespace std;

struct Node
{
    int data;
    struct Node* next;
    struct Node* pre;
};
   
struct AdjList
{
    struct Node *head;
}; 
class Graph
{
        int V;
        AdjList* array; 
    public:
        Graph(int V)
        {
            this->V = V;
            array = new AdjList [V];		 
            for (int i = 0; i < V; ++i)
                array[i].head = NULL;  		
        }

        void AddEdges(int src, int dest)
        {	
        							
    	
        	Node* newNode = new Node; 
            newNode->data = dest;				
            newNode->next = NULL;		
            newNode->pre = NULL;								
            newNode->next = array[src].head;	
            array[src].head = newNode;				
			newNode = new Node; 				
            newNode->data = src;				
            newNode->next = NULL;				
            newNode->next = array[dest].head;	
            array[dest].head = newNode;			
        }
        void DisplayAdjancyList()
        {
            int v;
            for (v = 0; v < V; ++v)
            {
                Node* tmp = array[v].head;		//tmp has the address of (0,1..)vertex head 
                cout<<"\n Vertex:"<<v<< " List  ";
                while (tmp)
                {
                    cout<<" "<<tmp->data<<" --> ";
                    tmp = tmp->next;
                }
                cout<<endl;
            }
        }
};
 
/*
 * Main
 */ 
int main()
{
    int n;
	cout<<"ENTER NO OF NODES: "<<endl;
	cin>>n;
	int m;
	cout<<"Enter No of Edges: "<<endl;
	cin>>m;
	Graph g(m);
	cout<<"Enter Edges Connection : "<<endl;
	for(int i=0;i<m;i++)
	{
		int row,col;
		cin>>row>>col;
		// now creating an edges
		g.AddEdges(row,col);
	}
	cout<<"Adjancy List: "<<endl;
	g.DisplayAdjancyList();
    
 
    return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////


***************************		QUESTION NO 3:		*****************************************

void BFS (int arr[][7],int start,int n)
{
	int i=start;
	int visited[n] = {0};
	cout<<" "<<i<<" --> ";
	visited[i] = 1;
	
	queue<int> q;
	q.push(i);
	while(!q.empty())
	{
		int u = q.front();
		q.pop();
		
		for(int v = 1;v<=n;v++)
		{
			if(arr[u][v] == 1 && visited[v] == 0)
			{
				cout<<" "<<v<<" --> ";
				visited[v] = 1;
				q.push(v);
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////


***************************		QUESTION NO 4:		*****************************************
//	PART 1  DRY RUN: //
FROM 3 IT WILL CALL dfs(5) then in 5 it will call 3 and 0 after completation of 5 
3 will call 4 then 4 will call 3 and 2 after completion of 4 
3 will call 2 after completion 3 will be done now   2 will call dfs(4) then 4 call dfs(2)	



   void solve(int i,bool *visited,vector<int> &ans,int V,vector<int> adj[])
    {

        visited[i]=true;

        ans.push_back(i);

        for(auto neighbour:adj[i])
        {

            if(visited[neighbour]==0)
            {
                solve(neighbour,visited,ans,V,adj);
            }

        }

    }

    vector<int> dfsOfGraph(int V, vector<int> adj[])
    {

        // Code here

        bool visited[V]={false};

        vector<int> ans;

        solve(0,visited,ans,V,adj);

        return ans;

    }

////////////////////////////////////////////////////////////////////////////////////////////////////////