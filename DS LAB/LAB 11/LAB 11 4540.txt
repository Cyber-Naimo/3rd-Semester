
	QUESTION NO 1 AND 2:

#include<iostream>
#include <bits/stdc++.h>
using namespace std;
#define N 7
class HashTableEntry
{
	public:
	int k;
	int v;
	HashTableEntry(int k, int v)
	{
		this->k= k;
		this->v = v;
	}

};
class HashMapTable	
{
	private:
	HashTableEntry **t;
	public:
	HashMapTable()
	{
		t = new HashTableEntry*[N];
		for(int i=0;i<N;i++)
		{
			t[i] = NULL;
		}
	}
	// HASH FUNCTION 1 :
	int HashFunc(int key)
	{
		return key % N;
	}
	// HASH FUNCTION 2 :
	int  frac(int &k)
	{
		return k*0.4;	
	}
	// HASH FUNCTION 3 :
 	int multiplication_hash(int key)
	{
 		int h  = floor (N * frac(key));
 		return h;
	 // m= size of table
	 //c in the range 0 < c < 1
	 // frac fractional part
	}
	// HASH FUNCTION 4 :
	int mid_square_hash(int key)
	{
		int value = key*key;
		int middle= value/2;
		return middle;
	}
	// HASH FUNCTION 5 :
	int Folding_hash(int value1, int value2, int value3)
	{
		return value1 + value2 + value3;
	}
	int base_number(int value)
	{
		int rem = 0;
		while(value!=0)
		{
		rem = value%2;
		rem+= rem*10;
		value/=2;
		}
		return rem;
	}
	// HASH FUNCTION 6 :
	int radix_hash(int value)
	{
		int result= base_number(value);
		return result;
		// return last4 digit of result;
	}
	void Insert(int k, int v)
	{
		// WE CAN USE ANY TYPE OF HASHING FUNCTION WE CREATED ABOVE FOR INDEXING
		int index = HashFunc(k);
		if(t[index] == NULL)
		{
			t[index] = new HashTableEntry(k,v);
		}
		else
		{
			delete t[index];
		}	
	}
	int SearchKey(int k)
	{
		// WE CAN USE ANY TYPE OF HASHING FUNCTION WE CREATED ABOVE FOR INDEXING
		int index = HashFunc(k);
		if(t[index]==NULL)
		{
			return -1;
		}
		else
		{
			return t[index]->v;
		}
	}
	void Remove(int k)
	{
		// WE CAN USE ANY TYPE OF HASHING FUNCTION WE CREATED ABOVE FOR INDEXING
		int index = HashFunc(k);
		if(t[index]==NULL)
		{
			return;
		}
		else
		{
			delete t[index];
		}
	}
	~HashMapTable()
	{
	
	}

};


int main()
{
	
	//  		QUESTION NO 1 AND 2 ARE COMBINE
   HashMapTable h;
   int k, v;
   int c;
   while(c!=4)
   {
      cout<<"Enter 1 to Insert element into the table"<<endl;
      cout<<"Enter 2 to Search element from the key"<<endl;
      cout<<"Enter 3 to Delete element at a key"<<endl;
      cout<<"Enter 4 to Exit"<<endl;
      cout<<"Enter your choice: ";
      cin>>c;
      switch(c)
 	{
         case 1:
         	{
         		cout<<"Enter element to be inserted: ";
	            cin>>v;
	            cout<<"Enter key at which element to be inserted: ";
	            cin>>k;
	            h.Insert(k, v);
       		    break;
			}
            
         case 2:
            {
            	cout<<"Enter key of the element to be searched: ";
	            cin>>k;
	            if (h.SearchKey(k) == -1)
				{
	               cout<<"No element found at key "<<k<<endl;
	               continue;
	            }
				else
				{
				    cout<<"Element at key "<<k<<" : ";
	               cout<<h.SearchKey(k)<<endl;
	            }
	      		break;
			}
         case 3:
            {
            	cout<<"Enter key of the element to be deleted: ";
	            cin>>k;
	            h.Remove(k);
        		break;
			}
         case 4:
         	{
         		exit(1);
			}
          
         default:
            cout<<"Enter correct option";
      }
   }
   return 0;
}

////////////////////////////////////////////////////////////////////


	QUESTION NO 3:

#include<iostream>
using namespace std;
class HashTable
{
	public:
	int k;		// student id
	int v;		//contact no
	HashTable()
	{
	}
	HashTable(int k, int v)
	{
		this->k= k;
		this->v = v;
	}

};
class ContactBook
{
	public:
		int size;
		int count;
		HashTable **arr;
		ContactBook(int size)
		{
			count = 0;
			this->size=size;
			arr = new HashTable*[size];
			for(int i=0;i<size;i++)
			{
				arr[i] = NULL;
			}	
		}
		bool empty()
		{
			if(count==0)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		int getsize()
		{
		  return size;
		}
		int HashFunction(int key)
		{
			return key%size;
		}
		int SearchKey(int key)
		{
			if(empty())
			{
				cout<<" Table is Empty"<<endl;
				return -1;
			}
			else
			{
				int index = HashFunction(key);
				int temp = index;
				
				while(1)
				{
					if(arr[index] == NULL || arr[index]->k!=key)
					{
						index = ((index+1)%size);
					}
					else
					{
						break;
					}
					
					if(index == temp)
					{
						temp = -1;
						break;
					}
				}
				if(temp == -1)
				{
					cout<<" Key not Found. "<<endl;
				}
				else
				{
					return arr[index]->v;
				}
			}
		}
		void Insert(int key, int val)
		{	
			if(count == size)
			{
				cout<<" Table is Full. "<<endl;
				return;
			}
			else
			{
				int index = HashFunction(key);
				while(arr[index]!=NULL)
				{
					// LINEAR PROBING
					index = (index + 1)% size;
				}
				arr[index] = new HashTable(key,val);
				count++;
			}
		}
		void Remove(int key)
		{
			if(empty())
			{
				cout<<" Table is Empty"<<endl;
				return;
			}
			else
			{
				int index = HashFunction(key);
				int temp = index;
				
				while(1)
				{
					if(arr[index] == NULL || arr[index]->k!=key)
					{
						index = ((index+1)%size);
					}
					else
					{
						break;
					}
					
					if(index == temp)
					{
						temp = -1;
						break;
					}
				}
				if(temp == -1)
				{
					cout<<" Key not Found. "<<endl;
				}
				else
				{
					delete arr[index];
					arr[index] = NULL;
					count--;
				}
			}
		}
		void Display()
		{
			for(int i=0;i<size;i++)
			{
				if(arr[i]!=NULL)
				{
					cout<<" [ "<< i<<" ]: Key = "<<arr[i]->k<<" Value = "<<arr[i]->v<<endl;
				}
			}
		}
	};
		
		

int main()
{
	
	//  		QUESTION NO 3
   ContactBook c(10);
   int k, v;
   int choice;
   while(choice!=5)
   {
      cout<<"Enter 1 to Insert element into the table"<<endl;
      cout<<"Enter 2 to Search element from the key"<<endl;
      cout<<"Enter 3 to Delete element at a key"<<endl;
      cout<<"Enter 4 to Display All Pair. "<<endl;
      cout<<"Enter 5 to Exit"<<endl;
      cout<<"Enter your choice: ";
      cin>>choice;
    switch(choice)
 	{
         case 1:
         	{
         		cout<<"Enter element to be inserted: ";
	            cin>>v;
	            cout<<"Enter key at which element to be inserted: ";
	            cin>>k;
	            c.Insert(k, v);
       		    break;
			}
            
         case 2:
            {
            	cout<<"Enter key of the element to be searched: ";
	            cin>>k;
	            if (c.SearchKey(k) == -1)
				{
	               cout<<"No element found at key "<<k<<endl;
	               continue;
	            }
				else
				{
				    cout<<"Element at key "<<k<<" : ";
	                cout<<c.SearchKey(k)<<endl;
	            }
	      		break;
			}
         case 3:
            {
            	cout<<"Enter key of the element to be deleted: ";
	            cin>>k;
	            c.Remove(k);
        		break;
			}
		 case 4:
		 	{
		 	  c.Display();
		 	  break;
			}
         case 5:
         	{
         		exit(1);
			}
          
         default:
            cout<<"Enter correct option";
      }
   }
   return 0;
}

///////////////////////////////////////////////////////////////////////////

	QUESTION NO 4:

#include <iostream>
#define size 10
using namespace std;
class HashTable
{
	public:
   int v, k;
   HashTable *next;
   HashTable(int k, int v)
   {
      this->k = k;
      this->v = v;
      this->next = NULL;
   }
};
class ContactBook
{
   public:
      HashTable **head;
      ContactBook()
	  {
         head = new HashTable*[size];
         for (int i = 0; i < size; i++)
         {
         	head[i] = NULL;	
		 }
            
      }
      int HashFunction(int key)
	  {
         return key % size;
      }
      void Insert(int k, int v) 
      {
	  
         int index = HashFunction(k);
         HashTable* pre = NULL;
         HashTable* temp = head[index];
         while (temp!= NULL)
		 {
            pre = temp;
            temp = temp->next;
         }
         if (temp == NULL)
		 {
            temp = new HashTable(k, v);
            if (pre == NULL)
			{
               head[index] = temp;
            }
			else
			{
               pre->next = temp;
            }
         }
		 else
		 {
            temp->v = v;
         }
      }
      bool empty()
      {
      	int index = 0;
      	HashTable* temp = head[index];
      	if(temp == NULL)
      	{
      		return true;
		}
		else
		{
			return false;
		}
	  }
      void Remove(int k)
	  {
         int index = HashFunction(k);
         HashTable* temp = head[index];
         HashTable* pre = NULL;
         if (temp == NULL || temp->k != k)
		 {
            cout<<"Element not found at key "<<k<<endl;
            return;
         }
         while (temp->next != NULL)
		 {
            pre = temp;
            temp = temp->next;
         }
         if (pre!= NULL)
		 {
            pre->next = temp->next;
         }
         delete temp;
      }
      void SearchKey(int k)
	  {
         int index = HashFunction(k);
         bool flag = false;
         HashTable* temp = head[index];
         if (temp != NULL) {
            while (temp != NULL)
			{
               if (temp->k == k)
			   {
                  flag = true;
               }
               if (flag)
			   {
                  cout<<"Element found at key "<<k<<": ";
                  cout<<temp->v<<endl;
               }
               temp = temp->next;
            }
         }
         if (!flag)
         {
         	 cout<<" Element not  found at key "<<k<<endl;
		 }
           
      }
      ~ContactBook()
	  {
      }
};

		
		

int main()
{
	
	//  		QUESTION NO 4
   ContactBook c;
   int k, v;
   int choice;
   while(choice!=5)
   {
      cout<<"Enter 1 to Insert element into the table"<<endl;
      cout<<"Enter 2 to Search element from the key"<<endl;
      cout<<"Enter 3 to Delete element at a key"<<endl;
      cout<<"Enter 4 to Exit"<<endl;
      cout<<"Enter your choice: ";
      cin>>choice;
    switch(choice)
 	{
         case 1:
         	{
         		cout<<"Enter element to be inserted: ";
	            cin>>v;
	            cout<<"Enter key at which element to be inserted: ";
	            cin>>k;
	            c.Insert(k, v);
       		    break;
			}
            
         case 2:
            {
            	cout<<"Enter key of the element to be searched: ";
	            cin>>k;
	            c.SearchKey(k);
	      		break;
			}
         case 3:
            {
            	cout<<"Enter key of the element to be deleted: ";
	            cin>>k;
	            c.Remove(k);
        		break;
			}
         case 4:
         	{
         		exit(1);
			}
          
         default:
            cout<<"Enter correct option";
      }
   }
   return 0;
}

